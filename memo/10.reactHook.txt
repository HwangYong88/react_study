리액트 훅 : useState훅---------------------------------
초기값설정(useState) 에서 무거운 작업을 하게될경우에는 useState안에 콜백함수를 넣어주게되면 초기화 할때만 부르고 다음부터는 부르지 않는다.
ex) const [names, setNames] = useState(() =>{return heavyWork();});처럼

리액트 훅 : useRef훅---------------------------------
state의 변화 -> 렌더링 -> 컴포넌트 내부 변수들 초기화가되지만
ref 의 변화 -> no 렌더링 -> 변수들의 값이 유지됨
state의 변화 -> 렌더링 -> 그래도 ref의 값은 유지됨

useRef의 사용처 1) 저장공간 2) dom에 접근(ex.커서제어)
useRef의 특징 : useState와 다르게 컴포넌트를 렌더링(초기화) 시키지 않는다

ref가 유용한 상황 : 변화는 감지하지만 변화를 렌더링을 발생시키면 안될때 사용

useContext-----------------------------------------------

context가 좋으면 prop가 필요없지 않은가? -> context만을 사용하면 컴포넌트를 재사용하기 어려워 질 수 있다.
prop drilling을 피하기 위한 목적이라면 component composition을 먼저 고려해보자. 이쪽이 더 간단.

보통전역변수로설정 : 테마, 언어, 로그인

사용법 : app.js에서 <themeContext.provider>로 선언해서 하위 컴포넌트에서 쓸수 잇게 해주고, 하위컴포넌트에서 useContext로 받아온다


useMemo--------------------------------------------------
1. 컴포넌트 최적화를 위해서 쓴다.
2. 반복적인 자주필요한 값을 처음꺼낼때 캐싱해놓고 그다음부터는 캐시에서 불러서 쓴다.
3. 함수형 콤포넌트는 렌더링 할때 함수를 호출한다 > **그때 모든 내부 변수가 초기화 된다.** > 이때 어떤 함수가 무거운일이면서 반복할 필요가 없을때 유즈 메모를 사용한다. > 반복적으로 렌더링 되어도 재사용가능하게한다.
4. 받는인자 1.콜백함수.2.배열
5. 콜백함수 : 메모리재이션할 값을 기억해서 리턴해주는 함수,> 콜백함수가 리턴하는값이 유즈메모가 리턴하는 값.
6 배열 : 의존성 배열. 배열안에 요소의값이 업데이트 될때만 유즈메모를 같이 업데이트한다.

7. app컴포넌트 안에 쉬운섬과 어려운섬이 공존할때 쉬운섬의 빠른처리속도에도 불구하고 의미없이 어려운섬이 같이 돌아가야만 하는 구조 > 이럴때 어려운섬은 안돌아가게 하면 좋지않을까.

8. 어려운섬을 기억해놓자 ! > 메모리 제이션> 유즈메모!

9. 예제
const hardSum = useMemo(() => {
 return hardCalculate(hardNumber)
}, [hardNumber])

>[hardNumber]: 이변수가 변할때만 유즈메모 사용
>return hardCalculate(hardNumber) :  유즈메모의 대상 함수(리턴값)

10. 사실 무거운 처리는 리액트에서는 없기 때문에 주로 사용되는 경우는 

11. 번외 : 유즈이펙트 참조
1) 렌더링 완료시
2) 특정값 변경시 
3) 초기 렌더링시([]배열안을 빈값으로놓으면)
4) 클린업(유즈 이펙트 안에 리턴을 넣으면 클린업의 역할(componentWillUnmount ): 컴포넌트가 제거 될때 리턴해주고 컴포넌트가 제거됨)

12.자바스크립트의 2가지 타입
원시타입 : Strign, number, boolean, null,. undefined
객체타입 : 원시타입을 제외한 모든것 object, array

원시 타입 비교 locationOne === locationOne >true
객체 타입 비교 locationOne === locationOne > false
왜? 객체 타입은 크기때문에 메모리상에 주소가있고 다른주소에 있다.

결론: 객체타입은 업데이트 될때 useEffect를 써도 강제로 컴포넌트전체를 렌더링 시킨다. 때문에 객체 타입은 useMemo를 써라.

useCallback -----------------------------------
유즈 콜백도 메모리제이션(반복하는 대신 메모리에 캐싱(기억)해두고 재사용하는 기법)으로 기능 최적화

차이점 useCallback : 함수를 리턴 , useMemo : 값을 리턴



useReducer---------------------------------------

useState처럼 스테이트생성 및 관리 :  여러 개 하위값을 같는 복잡한 스테이트의 경우에 사용하면 편하다
Reducer/ Duspatch / Action

리듀서 : 스테이터를 업데이트 해주는 역할(은행)
스테이트 : 통장
디스패치 : 사용자의 요구
액션 : 어떤 요청의 내용

dispatch(Action) -------> Reducer(State, Action) 하면 state를 update

useReducer도 변경시 컴포넌트 렌더링


